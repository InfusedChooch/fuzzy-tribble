# launcher.py
# GUI launcher for starting, stopping, and managing the HallPass server with CustomTkinter UI.

import os
import sys
import shutil
import socket
import threading
import subprocess
import webbrowser
import sqlite3
import json
import csv
import time
import pandas as pd
import tkinter as tk               # only for Menu and PhotoImage
from tkinter import messagebox    # use the standard messagebox
from datetime import datetime
from collections import defaultdict
from importlib import import_module
import contextlib
from functools import partial

import customtkinter as ctk       # <<< NEW: replace ttk and most tkinter widgets

# ─── customtkinter THEME SETUP ─────────────────────────────────────────────
ctk.set_appearance_mode("System")    # “Light” / “Dark” / “System"
ctk.set_default_color_theme("blue")  #  “blue”, “green”, “dark-blue", or your own theme JSON

IS_WINDOWS               = sys.platform.startswith("win")
CREATE_NEW_PROCESS_GROUP = 0x00000200
SERVER_EXE_NAME          = "hallpass_server.exe"

server_process = None
console_text   = None
statusbar      = None
server_pid     = None

# ─── helpers ───────────────────────────────────────────────────────────────
def get_local_ip():
    try:
        return socket.gethostbyname(socket.gethostname())
    except Exception:
        return "Unavailable"

def log(msg: str):
    if console_text:
        console_text.insert("end", msg + "\n")
        console_text.see("end")

def browser(url: str):
    webbrowser.open_new_tab(url)

def get_exe_path(rel: str):
    base = getattr(sys, "_MEIPASS", os.path.abspath("."))
    return os.path.join(base, rel)

# ─── audit log tailing ─────────────────────────────────────────────────────
def stream_audit_log():
    log_path = os.path.join("data", "logs", "console_audit.log")
    os.makedirs(os.path.dirname(log_path), exist_ok=True)

    if not os.path.exists(log_path):
        with open(log_path, "w", encoding="utf-8") as f:
            f.write("🔍 Audit log initialized.\n")

    def _follow():
        try:
            with open(log_path, "r", encoding="utf-8", errors="replace") as f:
                f.seek(0, os.SEEK_END)
                while True:
                    line = f.readline()
                    if not line:
                        time.sleep(1)
                        continue
                    if console_text:
                        clean_line = line.replace("â€“", "-").replace("â€”", "-")
                        console_text.insert("end", clean_line)
                        console_text.see("end")
        except Exception as e:
            if console_text:
                console_text.insert("end", f"[Audit tail error] {e}\n")
                console_text.see("end")

    threading.Thread(target=_follow, daemon=True).start()

# ─── launch / stop ─────────────────────────────────────────────────────────
def launch_server(mode: str, port: str, notebook):
    global server_process, statusbar, server_pid

    if console_text is None:
        messagebox.showerror("Console Not Ready", "Please wait for the GUI to load before launching.")
        return
    if server_process and server_process.poll() is None:
        messagebox.showinfo("Already running", "A server is already running.")
        return

    console_text.delete("1.0", "end")
    log(f"Launching {mode.upper()} on port {port}…")
    statusbar.configure(text=f"Launching {mode}…")

    base = os.path.dirname(__file__)
    vpy  = sys.executable
    bundled_srv = os.path.join(os.path.dirname(sys.executable), SERVER_EXE_NAME)

    if os.path.exists(bundled_srv):
        cmd = [bundled_srv, f"--port={port}"]
    else:
        if mode == "main":
            cmd = [vpy, "-u", os.path.join(base, "main.py")]
        else:
            wsgi_cli = shutil.which("waitress-serve")
            if not wsgi_cli:
                log("❌ waitress-serve not found. Install Waitress or bundle hallpass_server.exe.")
                return
            cmd = [wsgi_cli, "--call", f"--port={port}", "wsgi:get_app"]

    flags = CREATE_NEW_PROCESS_GROUP if (mode == "main" and IS_WINDOWS) else 0

    def stream():
        global server_process, server_pid
        try:
            server_process = subprocess.Popen(
                cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                text=True,
                bufsize=1,
                creationflags=flags
            )
            server_pid = server_process.pid
            statusbar.configure(text=f"Server running (PID {server_pid})")
            for line in server_process.stdout:
                log(line.rstrip())
        except Exception as exc:
            log(f"❌ Launch error: {exc}")
            server_process = None
            server_pid     = None

    threading.Thread(target=stream, daemon=True).start()


def stop_server():
    global server_process, statusbar, server_pid

    if not server_process:
        log("ℹ️ No server running.")
        statusbar.configure(text="No server to stop")
        return

    try:
        if server_process.poll() is not None:
            log("ℹ️ Server already exited.")
            server_process = None
            return

        log(f"🛑 Attempting to stop server (PID {server_pid})…")
        statusbar.configure(text="Stopping server…")

        if IS_WINDOWS:
            log("🛑 Sending CTRL+BREAK")
            server_process.send_signal(subprocess.signal.CTRL_BREAK_EVENT)
        else:
            log("🛑 Sending terminate()")
            server_process.terminate()

        try:
            server_process.wait(timeout=5)
        except subprocess.TimeoutExpired:
            log("⚠️ Terminate timeout - forcing kill()")
            server_process.kill()
            server_process.wait(timeout=5)
            log("💥 Forced kill succeeded.")

        log(f"✅ Server process PID {server_pid} stopped.")
        statusbar.configure(text="Server stopped")

    except Exception as exc:
        log(f"❌ Shutdown error: {exc}")
    finally:
        if server_process and server_process.stdout:
            try:
                server_process.stdout.close()
            except Exception as e:
                log(f"⚠️ Could not close stdout: {e}")
        server_process = None
        server_pid = None

# ─── GUI Builder ────────────────────────────────────────────────────────────
def build_gui():
    global console_text, statusbar

    # ─── ROOT WINDOW ────────────────────────────────────────────────────────
    root = ctk.CTk()  # <<< CUSTOMTKINTER window
    root.title("Server Launcher")
    root.geometry("1100x700")
    root.minsize(900, 600)

    # ─── MENU BAR ───────────────────────────────────────────────────────────
    menubar = tk.Menu(root)
    file_menu = tk.Menu(menubar, tearoff=0)
    file_menu.add_command(label='Export DB…', command=export_from_db)
    file_menu.add_separator()
    file_menu.add_command(label='Exit', command=lambda: (stop_server(), root.destroy()))
    menubar.add_cascade(label='File', menu=file_menu)

    tools_menu = tk.Menu(menubar, tearoff=0)
    tools_menu.add_command(label='Rebuild DB', command=trigger_rebuild)
    tools_menu.add_command(label='Split Masterlist', command=run_split_masterlist)
    menubar.add_cascade(label='Tools', menu=tools_menu)

    help_menu = tk.Menu(menubar, tearoff=0)
    help_menu.add_command(label='About', command=lambda: messagebox.showinfo('About', 'HallPass Launcher v1.0'))
    menubar.add_cascade(label='Help', menu=help_menu)

    root.config(menu=menubar)

    # ─── TABVIEW ────────────────────────────────────────────────────────────
    notebook = ctk.CTkTabview(root)
    notebook.pack(expand=True, fill="both", padx=10, pady=10)
    notebook.add("Server")
    notebook.add("Maintenance")
    notebook.add("Settings")

    # ─── SERVER TAB ─────────────────────────────────────────────────────────
    tab = notebook.tab("Server")
    
    # Port
    port_var = ctk.StringVar(value="5000")
    ctk.CTkLabel(tab, text="Port:", anchor="e", width=60).grid(row=0, column=0, padx=5, pady=5)
    ctk.CTkEntry(tab, textvariable=port_var, width=80).grid(row=0, column=1, padx=5, pady=5)

    # Launch / Stop Buttons
    ctk.CTkButton(tab, text="Launch via main.py", command=lambda: launch_server("main", port_var.get(), notebook))
    .grid(row=1, column=0, columnspan=2, padx=5, pady=5, sticky="ew")
    ctk.CTkButton(tab, text="Stop Server", command=stop_server)
    .grid(row=2, column=0, columnspan=2, padx=5, pady=5, sticky="ew")

    # Console Textbox
    console_text = ctk.CTkTextbox(tab, width=600, height=300)
    console_text.grid(row=3, column=0, columnspan=2, padx=5, pady=10, sticky="nsew")

    tab.rowconfigure(3, weight=1)
    tab.columnconfigure((0, 1), weight=1)

    # ─── STATUS BAR ─────────────────────────────────────────────────────────
    statusbar = ctk.CTkLabel(root, text="Ready", anchor="w")
    statusbar.pack(side="bottom", fill="x")

    # ─── OTHER TABS ─────────────────────────────────────────────────────────
    render_maintenance_tab(notebook, port_var)
    render_settings_tab(notebook)

    # ─── HEALTH CHECK & AUDIT STREAM ─────────────────────────────────────────
    threading.Thread(target=check_server_health, daemon=True).start()
    stream_audit_log()

    root.protocol("WM_DELETE_WINDOW", lambda: (stop_server(), root.destroy()))
    root.mainloop()

if __name__ == "__main__":
    build_gui()
